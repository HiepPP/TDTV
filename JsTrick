///Set time to sleep
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}

///Trigger change event when document.ready
$("select#ProvinceId").trigger('change',function () {}

///Remove validate
$(this).rules('remove', 'required');

// Call property from prototype
Gadget.prototype.get = function(what) {
return this[what];
};

///Apply vs call
The difference is that apply lets you invoke the function with arguments as an array; 
call requires the parameters be listed explicitly. A useful mnemonic is "A for array and C for comma."
Pseudo syntax:

+ theFunction.apply(valueForThis, arrayOfArgs)

+ theFunction.call(valueForThis, arg1, arg2, ...)

///normal map and Array.prototype.map.call
              var numbers = [1, 4, 9];
              var doubles = numbers.map(function(num) {
                return num * 2;
              });
==> work with array, can't work with string.
                  var str = '12345';
                  Array.prototype.map.call(str, function(x) {
                    return x;
                  }).reverse().join(''); 
==> work with string and array
