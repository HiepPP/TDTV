///Set time to sleep
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}

///Trigger change event when document.ready
$("select#ProvinceId").trigger('change',function () {}

///Remove validate
$(this).rules('remove', 'required');

// Call property from prototype
Gadget.prototype.get = function(what) {
return this[what];
};

///Apply vs call
The difference is that apply lets you invoke the function with arguments as an array; 
call requires the parameters be listed explicitly. A useful mnemonic is "A for array and C for comma."
Pseudo syntax:

+ theFunction.apply(valueForThis, arrayOfArgs)

+ theFunction.call(valueForThis, arg1, arg2, ...)

///normal map and Array.prototype.map.call
              var numbers = [1, 4, 9];
              var doubles = numbers.map(function(num) {
                return num * 2;
              });
==> work with array, can't work with string.
                  var str = '12345';
                  Array.prototype.map.call(str, function(x) {
                    return x;
                  }).reverse().join(''); 
==> work with string and array

//back button redirect to anotehr page
if (window.history && window.history.pushState) {
                window.history.pushState('', null, '');
                @{var url = new UrlHelper(Request.RequestContext).Action("Index", "Landing"); }
                $(window).on('popstate', function () {
                    window.location.href = '@url';
                });
            }
           
///Convert 1D array to multidimension array
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]

    var newArr = [];
    while (arr.length > 0 ) {
      newArr.push(arr.splice(0, 2));
}

///Count item with reduce
var names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];

var countedNames = names.reduce(function (allNames, name) { 
  if (name in allNames) {
    allNames[name]++;
  }
  else {
    allNames[name] = 1;
  }
  return allNames;
}, {});

----------------
const arr = ['banana', 'cherry', 'orange', 'apple', 'cherry', 'orange', 'apple', 'banana', 'cherry', 'orange', 'fig' ];

var a = arr.reduce((acc, item) => {
  acc[item] = (acc[item] || 0) + 1;
  return acc;
}, {})


///Concat multi arr
const data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
const flat = data.reduce((total, amount) => {
  total = total.concat(amount);
  return total;
}, []);

console.log(flat)


//get item detail then count
const data = [
  {a: 'happy', b: 'robin', c: ['blue','green']}, 
  {a: 'tired', b: 'panther', c: ['green','black','orange','blue']}, 
  {a: 'sad', b: 'goldfish', c: ['green','red']}
];

var r = data.reduce((acc, item)=> {
  item.c.forEach((i)=>{
    acc.push(i);
  })
  return acc;
}, []).reduce((acc, item)=> {
  acc[item] = (acc[item] || 0) + 1;
  return acc;
}, {})

///Use reduce to filler by data detail
let data = [
  {name: "Raphel", gender: "male"},
  {name: "Tom", gender: "male"},
  {name: "Jerry", gender: "male"},
  {name: "Dorry", gender: "female"},
  {name: "Suzie", gender: "female"},
  {name: "Dianna", gender: "female"},
  {name: "Prem", gender: "male"},
];

var r = data.reduce((acc, item) => {
  acc[item.gender].push(item.name);
  return acc;
}, {male: [], female: []})

